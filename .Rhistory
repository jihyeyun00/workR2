if(linecount>10){
print('\n')
linecount <- 1
}
}
linecount <- 1
for(i in 1:100){
cat(i,'')
linecount <- linecount+1
if(linecount>10)
print('\n')}
linecount <- 1
for(i in 1:100)
cat(i,'')
linecount <- linecount+1
linecount <- 0
for(i in 1:100){
cat(i,' ')
linecount <- linecount+1
if(linecount>9){
print('\n')
linecount <- 1
}
}
linecount <- 0
for(i in 1:100){
cat(i,' ')
linecount <- linecount+1
if(linecount>9){
print('\n')
linecount <- 0
}
}
for (i in 1:10) {
sum <- sum + i
if (i <- 5) {
break
}
}
sum <- 0
for (i in 1:10) {
if (i %% 2 == 0)
next
}
sum <- sum + i
sum <- 0
for (i in 1:10) {
if (i %% 2 == 0){
next
}
sum <- sum + i
}
sum <- 0
for (i in 1:10) {
if (i %% 2 == 0){
next
}
sum <- sum + i
}
sum <- 0
for (i in 1:10) {
if (i %% 2 == 0){
next
}
sum <- sum + i
}
for (i in 1:10) {
sum <- sum + i
if (i <- 5) {
break
}
}
for (i in 1:100){
cat(i,'')
if(i %% 10==0){
print('\n')
}
}
for (i in 1:100){
cat(i,'')
if(i %% 10==0){
print('\n')
}
}
for (i in 1:100){
cat(i,'')
if(i %% 10==0){
print('\n')
}
}
for (i in 1:10) {
sum <- sum + i
if (i <- 5) {
break
}
}
sum
sum <- 0
for (i in 1:10) {
if (i %% 2 == 0){
next
}
sum <- sum + i
}
sum
log(10)+5           #로그함수
log(10, base = 2)
sqrt(25)            #제곱근
max(5,3,2)           #가장 큰 수
min(3,9,5)            #가장 작은 수
abs(-10)             #절대값
factorial(5)          #팩토리얼
sin(pi/2)             #삼각함수
mymax <- function(x,y) {
num.max <- x
if(y>num.max){
num.max <- y
}
return(num.max)
}
mymax(10,15)
a <- 10
b <- 5
c <- 8
max <- mymax(a,b)
max <- mymax(max,c)
max
score <- scan()
score
score <- scan()
if(score >=85){
result <- "우수"
}
cat("당신 ", result, score)
mydiv <- function(x,y=2){
result <- x/y
return(result)
}
mydiv(x=10, y=3)
mydiv(10,3)
mydiv(10)
my_max(10,5)
my_div(10,2)
setwd("D:/WorkR")         #경로지정
source("mylib.R")         #lib 파일 지정
#함수 호출
my_max(10,5)
my_div(10,2)
my_max(10,5)
my_div(8,2)
my_max(10,5)
my_max(10,5)
my_max(10,5)
my_max(10,5)
my_max <- function(x,y) {
num.max <- x
if(y>num.max){
num.max <- y
}
return(num.max)
}
mymax <- function(x,y) {      #함수정의
num.max <- x
if(y>num.max){
num.max <- y
}
return(num.max)
}
mymax <- function(x,y) {      #함수정의
num.max <- x
if(y>num.max){
num.max <- y
}
return(num.max)
}
mymax(10,15)                  #함수 호출
a <- 10
b <- 5
c <- 8
max <- mymax(a,b)
max <- mymax(max,c)
max
my_max(10,5)
my_div(8,2)
my_max(10,5)
my_max(10,5)
log(10)+5           #로그함수
log(10, base = 2)
sqrt(25)            #제곱근
max(5,3,2)           #가장 큰 수
min(3,9,5)            #가장 작은 수
abs(-10)             #절대값
factorial(5)          #팩토리얼
sin(pi/2)             #삼각함수
v <- c(10,5,8)
max <- v{1}
for(i in length(v)-1){
if(v[1]>max){
max <- v[1]
}
}
max
v <- c(10,5,8)
max <- v{1}
for(i in 2: length(v)){
if(v[1]>max)
max <- v[1]
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v{1}
for(i in 2: length(v)){
if(v[1]>max){
max <- v[1]
}
}
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v{1}
for(i in 2: length(v)){
if(v[1]>max){
max <- v[1]
}
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v{1}
for(i in 2: length(v)){
if(v[1]>max){
max <- v[1]
}
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v[1]
for(i in 2: length(v)){
if(v[1]>max){
max <- v[1]
}
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v[1]
for(i in 2: length(v)){
if(v[1]>max){
max <- v[i]
}
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v[1]
for(i in 2: length(v)){
if(v[i]>max){
max <- v[i]
}
}
max
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(true,true,false,true)
x;y;z
class(x);cass(y);class(z)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(true,true,false,true)
x;y;z
class(x);class(y);class(z)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
class(x);class(y);class
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
class(x);class(y);class(z)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
class(x);class(y);class(z)
w <- c(1,2,3,"a","b","c")
w
class(w)
v1 <- 50:90; v1
v2 <- c(1,2,3,50:90);v2
v1 <- 50:90; v1
v2 <- c(1,2,3,50:90);v2
class(v1); class(v2)
w <- c(1,2,3,"a","b","c")   #문자형으로 맞춤-동일자료형집합,원래는 이렇게 쓰면 안됌
w
class(w)
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
class(x);class(y);class(z)
v1 <- 50:90; v1
v2 <- c(1,2,3,50:90);v2
class(v1); class(v2)
v <- c(10,5,8)
max <- v{1}
for(i in 2: length(v)){
if(v[i]>max){
max <- v[i]
}
}
max
v <- c(10,5,8,21,15,7,31,9,100,16)
max <- v[1]
for(i in 2: length(v)){
if(v[i]>max){
max <- v[i]
}
}
max
v3 <- seq(1,101,3);
v4 <- seq(0.1, 1.0, 0.1);
v5 <- rep(1,tiems = 5);
v6 <- rep(1:5, tiems = 3);
v7 <- rep(c(1,5,9), tiems = 3);
v3 <- seq(1,101,3);
v4 <- seq(0.1, 1.0, 0.1);
v5 <- rep(1,times = 5);
v6 <- rep(1:5, times = 3);
v7 <- rep(c(1,5,9), times = 3);
v3 <- seq(1,101,3);
v4 <- seq(0.1, 1.0, 0.1);
v5 <- rep(1,times = 5);
v6 <- rep(1:5, times = 3);
v7 <- rep(c(1,5,9),times = 3);
v3 <- seq(1,101,3);
v4 <- seq(0.1, 1.0, 0.1);
v5 <- rep(1,times = 5);
v6 <- rep(1:5, times = 3);
v7 <- rep(c(1,5,9),times = 3);
score <- c(90,85,70);
names(score)
names(score) <- c("Hong","Kim","Lee")
names(score)
score
score[1]
score[2]
score[3]
score["hong"]
score["kim"]
score["lee"]
d <- c(1,4,3,7,8)
d[1]; d[2]; d[3]; d[4]; d[5]; d[6]
v3 <- seq(1,101,3);        #seq
v4 <- seq(0.1, 1.0, 0.1);
v5 <- rep(1,times = 5);     #rep
v6 <- rep(1:5, times = 3);
v7 <- rep(c(1,5,9),times = 3);
score[1]
score[2]
score[3]
score["hong"]
score["kim"]
score["lee"]
d <- c(1,4,3,7,8)
d[1]; d[2]; d[3]; d[4]; d[5]; d[6]
score[1]
score[2]
score[3]
score["hong"]
score["kim"]
score["lee"]
for (i in 1:length(score)) {
print(score(i))
}
score_names <- c("hogn","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
for (i in 1:length(score)) {
print(score[i])
}
score_names <- c("hogn","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
score_names <- c("hong","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
score_names <- c("hong","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
for (i in 1:length(score)) {
print(score[i])
}
score_names <- c("hong","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
for (i in 1:length(score)) {
print(score[i])
}
score_names <- c("hong","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
score_names <- c("hong","kim","lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
score_names <- c("hong", "kim", "lee")
for (i in 1:length(score)) {
print(score[score_names[i]])
}
score_names <- c("hong", "kim", "lee")
for (i in 1:length( score ) ) {
print(score[score_names[i]])
}
v <- c(10,5,8,21,15,7,31,9,100,16)      #무슨 말?
max <- v[1]
for(i in 2: length(v)){
if(v[i]>max){
max <- v[i]
}
}
max
d <- c(1,4,3,7,8)
d[c(1,3,5)]
d[1:3]
d[seq(1,5,2)]
d[-2]
d[-c(3:5)]
GNP <- c(2090,2450,960);
names(GNP) <- c("Korea","Japan","Nepal");
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
score[c("Hong","kim","Lee")]
#
v1 <- c(1,5,7,8,9);
v1[2] <- 3;
v1[c(1,5)] <- c(10,20);
v1 <- c(1,5,7,8,9);       v1 #c함수를 잘 활용하면
v1[2] <- 3;       v1
v1[c(1,5)] <- c(10,20);     v1
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
d <- c(1,2,3,4,5,6,7,8,9,10)
sum(d)  #합계
sum(2*d)
length(d) #벡터의 요소 개수(길이)
mean(d[1:5]) #평균
mean(d)
median(d[1:5]) #중앙값
median(d)
max(d) #최대값
min(d) #최소값
sort(d) #정렬
sort(d,decreasing = FALSE)
sort(d,decreasing = TRUE)
range(d) #값의 범위(최소값~최대값)
var(d) #분산
sd(d) #표준편차
v <- sum(d)/length(d); v
d <- 5
d[d>5]
sum(d>5)
sum(d[d>5])
d==5
cond <- d>5 & d<8;
d[cond]
d >= 5
d[d>5]
sum(d>5)
sum(d[d>5])
d==5
cond <- d>5 & d<8;
d[cond]
d >= 5
d[ d > 5 ]
sum( d > 5)
sum(d[d>5])
d==5
cond <- d>5 & d<8;
d[cond]
cond <- d>5 & d<8; cond
d[cond]
all(d>5)
any(d>5)
all(d>5)
any(d>5)
head(d)
tail(d)
head(d,3)
tail(d,3)
