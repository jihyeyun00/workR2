number <- 10
number2 <- 100
number3 <- number
number4 <- number2
number2 <- number
numberValue <- 1
str_value <- "R Lunguage"
booleanvalue <- TRUE
numberValue <- "R script"
print(numberValue)
print(str_value)
print(booleanvalue)
numberValue <- "R script"
print(numberValue)
print(str_value)
print(booleanvalue)
numberValue <- 1
numberValue <- "R script"
print(numberValue)
print(str_value)
print(booleanvalue)
cat("numbervalue:",numberValue,"\n")
cat("String :",str_value, "\n")
cat("booleanvalue:",booleanvalue,"\n")
numberValue <- scan()
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
cat("Numeric number:",numberValue,"\n")
numberValue <- scan()
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
numberValue <- scan()
numberValue <- scan()
numberValue <- scan()
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
numberValue <- scan()
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
numberValue <- scan()
cat("Numeric number:",numberValue,"\n")
resultAdd <- number1 <- number2
resultAdd <- number1 <- number2
resultAdd <- number1 <- number2
resultAdd <- number1 / number2
resultAdd <- number2 %% number1
resultAdd <- number2 ^ 5
print(resultAdd)
print(resultSub)
print(resultMul)
print(resultDiv)
print(resulRem)
print(resultSec)
number1 <- 0
number1 <- number1+10
number1
resultAdd <- number1 <- number2
resultSub <- number1 <- number2
resultMul <- number1 <- number2
resultDiv <- number1 / number2
resultRem <- number2 %% number1
resultSec<- number2 ^ 5
print(resultAdd)
print(resultSub)
print(resultMul)
print(resultDiv)
print(resulRem)
print(resultSec)
number1 <- number1+10
number1
number1 <- number1+10
number1
number2 <- 100
number1 <- number2+10
number1
number2
print(number1+10+number2/2)
print(number1+10*number2/2)
print((number1+10)*number2/2)
ｎｕｍｂｅｒ３００ <- ｎｕｍｂｅｒ３００＋１０
number301 <- number300+2
number301
print(number1>number2)
print(number1>=number2)
print(number1<number2)
print(numbr1<=number2)
print(number1!=number2)
print(number1>10&number2>10)
print(number1> 10 |number2>10)
print(!(number1 >10))
print(number1>10& number2>10)
print(number1> 10 |number2>10)
print(!(number1 >10))
print(number1> 10& number2>10)
print(number1> 10 |number2>10)
print(!(number1 >10))
number1 <- 10.5
number2 <- 10
print(number1> 10& number2>10)
print(number1> 10 |number2>10)
print(!(number1 >10))
number <- 100
str <- "R languge"
result=number +str
print(result)
number <- "100"
str <- "R languge"
result=number +str
print(result)
job.type <- 'a'
if(job.type=='b')(
bonus <- 200
)esle (
bonus <- 100)
cat("joy type :",job.type,"\t\tbounus:",bonus)
job.type <- 'a'
if(job.type=='b'){
bonus <- 200
} esle {
bonus <- 100}
cat("joy type :",job.type,"\t\tbounus:",bonus)
job.type <- 'a'
if(job.type=='b'){
bonus <- 200
} else {
bonus <- 100}
cat("joy type :",job.type,"\t\tbounus:",bonus)
if(job.type=='a'){bonus <- 200}
cat("joy type :",job.type,"\t\tbonus:",bonus)
if(score >=90){grade <- 'a'
} else if(score>=80){grade <-'b'
} else if(score>=70){grade <- 'c'
} else if(score>=60) {grade <- 'd'
} else {grade <- 'f'}
cat("score :",score,"\t\tgrade:",grade)
if(score >=90)
{grade <- 'a'
} else if(score>=80){grade <-'b'
} else if(score>=70){grade <- 'c'
} else if(score>=60) {grade <- 'd'
} else {grade <- 'f'}
cat("score :",score,"\t\tgrade:",grade)
if(2/2=0)
{value <- oddeven}
else(2/2=!0)
{value <- oddeven}
cat("number:",number,"\t\tgrade:",number)
if(2/2=0)
{value <- oddeven}
else(2/2=!0)
{value <- oddeven}
cat("number:",number,"\t\tnumber:",number)
job.type <- 'a'
if(job.type=='b'){
bonus <- 200
} else {
bonus <- 100}
cat("joy type :",job.type,"\t\tbounus:",bonus)
job.type <- 'b'
if(job.type=='a'){bonus <- 200}
cat("joy type :",job.type,"\t\tbonus:",bonus)
score <- 85
if(score >=90)
{grade <- 'a'
} else if(score>=80){grade <-'b'
} else if(score>=70){grade <- 'c'
} else if(score>=60) {grade <- 'd'
} else {grade <- 'f'}
cat("score :",score,"\t\tgrade:",grade)
number <- 15
remainder <- nimber %% 2
#if (remainder ==0){
if(number%% 2 ==0)
{oddeven <- '짝수'}
else{oddeven <- '홀수'}
cat("number:",number,"는",oddeven,"이다")
number <- 15
remainder <- number %% 2
#if (remainder ==0){
if(number%% 2 ==0){
oddeven <- '짝수'
}else{
oddeven <- '홀수'
}
cat("number:",number,"는",oddeven,"이다")
number <- 20
remainder <- number %% 2
#if (remainder ==0){
if(number%% 2 ==0){
oddeven <- '짝수'
}else{
oddeven <- '홀수'
}
cat("number:",number,"는",oddeven,"이다")
num <- 20
rema <- num %% 2
#if (remainder ==0){
if(num%% 2 ==0){
oddeven <- '짝수'
}else{
oddeven <- '홀수'
}
cat("num:",num,"는",oddeven,"이다")
if(a>5 & b>5)
{
cat(a,">5 and",b,">5")
}  else {cat(a,"<=5 or ",b, "<=5")
}
a <- 4
b <- 20
if(a>5 & b>5)
{
cat(a,">5 and",b,">5")
}  else {cat (a,"<=5" or ",b, "<=5")
}
help(ifelse)
c <- ifelse(a>b,a,b)
cat("a =",a, "\tb=", b, "\tb=",c)
a <- 4
b <- 20
if(a>5 & b>5){
}else{
}
a <- 4
b <- 20
if(a>5 & b>5){
cat(a,">5 and",b,">5")
}else{
cat(a,"<=5 or ",b,"<=5")
}
a <- 10
b <- 5
c <- 8
ma <- a
if(b>ma){
ma=b
}
if(c>ma){
ma=c
}
cat("a=",a,"b=",b,"c=",c,"ma=",ma)
for(i in 1:10) {
print(i)
}
for(i in 1:10) {
print('*')
}
multiple=2
for(i in 2:9){
cat(multiple,'x',i,'=',multiple*i,'\n')
}
while(i <- 10) {
print(i)
i <- i+1
}
multiple <- 2
i <- 2
while(i<=9) {
cat(multiple,'x',i,'=',multiple*i,'\n')
}
multiple <- 2
i <- 2
while(i<=9) {
cat(multiple,'x',i,'=',multiple*i,'\n')
}
i <- 1
while(i <- 10) {
print(i)
i <- i+1
}
i <- 1
while(i <= 10) {
print(i)
i <- i+1
}
multiple <= 2
i <- 2
while(i<=9) {
cat(multiple,'x',i,'=',multiple*i,'\n')
}
multiple <- 2
i <- 2
while(i<=9) {
cat(multiple,'x',i,'=',multiple*i,'\n')
i <- i+1
}
for(i in 1:100) {
print(i*10,"\n")
}
for(i in 1:100) {
i <- i+1
cat(i="i+1",i,"\n")
}
linecount <- 1
for (i in 1:100) {
cat(i,'')
linecount <- linecount+1
if(linecount>10){
print('\n')
}
}
linecount <- 1
for (i in 1:100) {
cat(i,'')
linecount <- linecount+1
if(linecount>10){
print('\n')
linecount <- 1
}
}
for (i in 1:100){
cat(i,'')
if(i %% 10==0){
print('\n')
}
}
