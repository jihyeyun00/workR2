df<-data.frame(id=c(1,2,3,4,5,6),
class=c(1,1,1,1,2,2),
math=c(50,60,45,30,25,50),
english=c(98,98,86,98,80,89),
science=c(50,60,78,58.65,98))
sf <- data.frame(id = c(1, 2, 3, 4, 5, 6), class = c(1, 1, 1, 1, 2, 2),
math = c(50, 60, 45, 30, 25, 50),
english = c(98, 98, 86, 98, 80, 89),
science = c(50, 60, 78, 58, 65, 98))
sf
df <- data.frame(id = c(1, 2, 3, 4, 5, 6), class = c(1, 1, 1, 1, 2, 2),
math = c(50, 60, 45, 30, 25, 50),
english = c(98, 98, 86, 98, 80, 89),
science = c(50, 60, 78, 58, 65, 98))
f
df
df%>%filter(class==1)
df%>%filter(class==2)
df%>%filter(class!=1)
df%>%filter(class!=2)
df%>%filter(science>70)
df%>%filter(math<50)
df%>%filter(class==1 & math>=50)
df%>%filter(mate>=2 | english>=90)
df%>%filter(class==1 %in% c(1,2,5))
class1<-df %>% filter(class==1)    #split 함수는 list 형식으로 추출,파이프는 따로 종류도
class2<-df %>% filter(class==2)
class1
class2
df%>%filter(math>=2 | english>=90)
df%>%filter(math>=50 | english>=90)
df%>%filter(class==1 %in% c(1,2,5))
df%>%filter(class==1 %in% c(1,2,5))
class1<-df %>% filter(class==1)    #split 함수는 list 형식으로 추출,파이프는 따로 종류도
class1<-df %>% filter(class==1)    #split 함수는 list 형식으로 추출,파이프는 따로 종류도
class2<-df %>% filter(class==2)
class1
class2
df %>% select(math)
df %>% select(science)
df %>% select(class,math,science)
df %>% select(-math)
#dplyr 함수 조합
df%>%filter(class==1)%>%select(science)
df%>%select(id,science)%>%head
df%>%select(id,science)%>%sum
df%>%select(id,science)%>%max
df%>%select(science)%>%sum
#arrange():정렬
df%>%arrange(science)
df%>%arrange(desc(science))
df%>%
mutate(total=math+english+science)%>%head
df%>%
mutate(total=math+english+science,average=(math+english+science)/3)%>%head
df%>%
mutate(grade=ifelse(science>=60,'pass','fail'))%>%head
df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%
mutate(grade=ifelse(science>=60,'pass',
ifesle(average<60, 'fail',
'normal')))%>%head
df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%
mutate(grade=ifelse(science>60,'pass',
ifesle(average<60, 'fail',
'normal')))%>%head
df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%arrange(desc(average))%>%head
df.sort<-df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%arrange(desc(average))%>%head
df.sort
df%>%summarise(mean_math=mane(math))
#summary():집단별 요약
#group_by:집단별 나누기
df%>%summarise(mean_math=mean(math))
df%>%group_by(class)%>%
summarise(mean_math=mean(math),
mean_english=mean(english),
mean_science=maen(science),
n=n())
df%>%group_by(class)%>%
summarise(mean_math=mean(math),
mean_english=mean(english),
mean_science=mean(science),
n=n())
install.packages("ggplot2")
str(ggplot2::mpg)     # :: 의 의미ggplot2 라는 애가 가지고 있는 mpg
mpg<-data.frame(ggplot2:mpg)
mpg<-data.frame(ggplot2::mpg)
mpg<-data.frame(ggplot2::mpg)
dim(mpg)
str(mpg)
head(mpg)
View(mpg)
mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty=mean(cty))%>%
head(10)
mpg%>%
group_by(manufacturer,drv)%>%
filter(class=='suv')%>%
mutate(tot=(cty+hwy)/2)%>%
summarise(mean_tot=mean(tot))%>%
arrange(desc(mean_tot))%>%
head(5)
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3),
address=c("서울","부산","제주"),
stirngsFactors=F)   #팩터로 하지마
df1<-data.frame(id=c(1,2,4),
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3),
address=c("서울","부산","제주"),
stirngsFactors=F)   #팩터로 하지마
df1<-data.frame(id=c(1,2,4),
gender=c("남","여","남"))
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3),
address=c("서울","부산","제주"),
stirngsFactors=F)   #팩터로 하지마
df2<-data.frame(id=c(1,2,4),
gender=c("남","여","남"))
df_left<-left_join(df1,df2,by='id')
df_left
df_inner<-inner_join(df1,df2,by='id')
df_inner
df_full<-full_join(df1,df2,by='id')
df_full
mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty=mean(cty))%>%
head(10)
mpg%>%
group_by(manufacturer,drv)%>%
filter(class=='suv')%>%
mutate(tot=(cty+hwy)/2)%>%
summarise(mean_tot=mean(tot))%>%
arrange(desc(mean_tot))%>%
head(5)
df1<-data.frame(id=c(1,2,3,4,5),
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85))
df1<-data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
test=c(60,80,70,90,85))
df_all<-bind_rows(df1,df2)
df_all
install.packages("psych")
library(psych)
summary(mtcars)
describe(mtcars)
install.packages("desdr")
require(descr)
install.packages("desdr")
require(desdr)
install.packages("descr")
require(descr)
df<-data.frame(id=c(1,2,4),
gender=c("남","여","남"))
table(df$gender)
freq(df$gender)
freq(df$gender,plot=F)
table(df$gender)
freq(df$gender)   #table
df1<-data.frame(id=c(1,2,3,4,5),         #??
midterm=c(60,80,70,90,85))
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
total<-left_join(df1,df2,by="id")
df1<-data.frame(id=c(1,2,3),
address=c("서울","부산","제주"),
stirngsFactors=F)   #팩터로 하지마
df2<-data.frame(id=c(1,2,4),
gender=c("남","여","남"))
total
df_left<-left_join(df1,df2,by='id')
df_left
df_inner<-inner_join(df1,df2,by='id')
df_inner
df_full<-full_join(df1,df2,by='id')
df_full
ds<-data.frame(state.x77)
ds[2,3]<-NA
ds[3,1]<-NA
ds[2,4]<-NA
ds[4,3]<-NA
head(ds)
# (1) 각 열별로 결측값이 몇 개인지 출력하시오.
na_count<-apply(ds,2,function(y) sum(is.na(y)))
# (1) 각 열별로 결측값이 몇 개인지 출력하시오.
na_count<-apply(ds,2,function(y) sum(is.na(y))); na_count
# (2) 결측값이 포함된 행들의 데이터를 출력하시오.
rowSums(is.na(ds))
sum(rowSums(is.na(ds))>0)
rownames(is.na(ds))
rowSums(is.na(ds))
sum(rowSums(is.na(ds))>0)
summary(ds)
head(ds)
ds[!complete.cases(ds),]
# (4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
ds.new<-ds[complete.cases(ds),]
head(ds.new)
#
# (1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
head(st)
boxplot.stats(st)
boxplot.stats(st)$out
boxplot(st,main=state)
st<-data.frame(state.x77)
#
# (1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
head(st)
boxplot.stats(st)
boxplot.stats(st)$out
boxplot(st,main=state)
boxplot(st,main='state')
# (2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
boxplot.stats(st$Area)$out
out.st<-boxplot.stats(st$Area)$out
st$Area[st$Area%in%out.st]<-NA
out.st<-boxplot.stats(st$Area)$out
st$Area[st$Area%in%out.st]<-NA
head(st)
new.st<-out.st[complete.cases(st),]
head(new.st)
out.st<-boxplot.stats(st$Area)$out
st$Area[st$Area%in%out.st]<-NA
head(st)
new.st<-st[complete.cases(out.st),]
head(new.st)
new.st<-st[complete.cases(out.st),]
head(new.st)
# 문3)
# R에서 제공하는 airquality 데이터셋에 대해 다음의 문제를 해결하기 위한
# R 코드를 작성하시오.
#
# (1) airquality를 AQ에 저장하시오.
str(airquality)
AQ<-data.frame(airquality)
AQ<-data.frame(airquality) ;AQ
# (2) AQ에서 열별로 NA의 개수를 출력하시오.
AQ.na<-apply(AQ,2,function(y) sum(is.na(y)))
AQ.na<-apply(AQ,2,function(y) sum(is.na(y)))
AQ.na
rowSums(is.na(AQ.na))
sum(rowSums(is.na(AQ.na))>0)
sum(is.na(AQ.na))
AQ.na<-apply(AQ,2,function(y) sum(is.na(y)))
AQ.na
rowSums(is.na(AQ.na))
sum(rowSums(is.na(AQ.na))>0)
# (4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
head(AQ.na)
y<-x[complete.cases(AQ.na),]
y<-x[complete.cases(AQ.na),]
head(AQ.na)
y<-x[complete.cases(AQ.na),]
head(y)
y<-x[complete.cases(AQ.na),]
head(y)
head(AQ.na)
y<-x[complete.cases(AQ.na),]
head(y)
y<-AQ.na[complete.cases(AQ.na),]
head(y)
AQ.na<-apply(AQ,2,function(y) sum(is.na(y)))
AQ.na
st2<-st[complete.cases(out.st),]
head(st2)
y<-AQ.na[complete.cases(AQ.na),]
head(y)
head(AQ.na)
AQ
AQ.na<-apply(AQ,2,function(y) sum(is.na(y)))
AQ.na
y<-AQ.na[!complete.cases(AQ.na),]
head(y)
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하
#시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'other.author' ) )
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors
books
#(1) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하시오(두 데이터프레임에서 공통 열의 값이 일치하는 것들만 병합).
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name' ) )
#(2) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되
#authors의 행들이 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name' ), all.x = T )
#(3) surname과 name을 공통 열로 하여 authors와 books를 병합하여 출력하되 books
#의 행들은 모두 표시되도록 하시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'name' ), all.y = T )
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하
#시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'other.author' ) )
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds[ idx, ]
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
#
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
for ( i in 1:ncol( ds ) ) {
cat( 'column [ ', i, ' ] : ', sum( is.na( ds[ , i ] ) ), '\n' )
}
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds[ idx, ]
cnt <- 0
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
cnt <- cnt + 1
}
}
cnt
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds.new <- ds[ -idx, ]
ds.new
colmean <- colMeans( AQ, na.rm = T )
colmean
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
#
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
for ( i in 1:ncol( ds ) ) {
cat( 'column [ ', i, ' ] : ', sum( is.na( ds[ , i ] ) ), '\n' )
}
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds[ idx, ]
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
cnt <- 0
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
cnt <- cnt + 1
}
}
cnt
#(4) 결측값이 포함된 행들을 제외하고 새로운 데이터셋 ds.new를 만들어보시오.
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds.new <- ds[ -idx, ]
ds.new
#문2)
#다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기
#위한 R 코드를 작성하시오.
#
st <- data.frame(state.x77)
#
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st[, 1 ] )     # 특이값 있음
boxplot( st[, 2 ] )     # 특이값 있음
boxplot( st[, 3 ] )     # 특이값 없음
boxplot( st[, 4 ] )     # 특이값 없음
boxplot( st[, 5 ] )     # 특이값 없음
boxplot( st[, 6 ] )     # 특이값 없음
boxplot( st[, 7 ] )     # 특이값 없음
boxplot( st[, 8 ] )     # 특이값 있음
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
#(3) st에서 NA가 존재하는 행들을 제거하여 st2에 저장하시오.
st2 <- st[ complete.cases( st ), ]
st2
#문3)
#R에서 제공하는 airquality 데이터셋에 대해 다음의 문제를 해결하기 위한
#R 코드를 작성하시오.
#(1) airquality를 AQ에 저장하시오.
AQ <- airquality
#(2) AQ에서 열별로 NA의 개수를 출력하시오.
for ( i in 1:ncol( AQ ) ) {
cnt <- sum( is.na( AQ[ , i ] ) )
cat( names( AQ )[ i ], '\t', cnt, '\n' )
}
#(3) AQ에서 행별로 NA의 개수를 출력하시오.
for ( i in 1:nrow( AQ ) ) {
cnt <- sum( is.na( AQ[ , i ] ) )
cat( 'row [ ', i, ' ] : ', cnt, '\n' )
}
#(4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[ complete.cases( AQ ), ]
#(5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을
#출력하시오.
colmean <- colMeans( AQ, na.rm = T )
colmean
AQ2 <- AQ
for ( i in 1:ncol( AQ2 ) ) {
AQ2[ is.na( AQ2[ , i ] ), i ] <- colmean[ i ]
}
AQ2
colmean <- colMeans( AQ, na.rm = T )
colmean
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
boxplot( st[, 1 ] )     # 특이값 있음
boxplot( st[, 2 ] )     # 특이값 있음
boxplot( st[, 3 ] )     # 특이값 없음
boxplot( st[, 4 ] )     # 특이값 없음
boxplot( st[, 5 ] )     # 특이값 없음
boxplot( st[, 6 ] )     # 특이값 없음
boxplot( st[, 7 ] )     # 특이값 없음
boxplot( st[, 8 ] )     # 특이값 있음
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
View(air)
setwd("D:/WorkR")  #/써야한다               #먼저 컴퓨터에 다운 받고
air <- read.csv("airquality.csv",header=T) #엑셀파일에서 오존,등등
View(air)
setwd("D:/WorkR")  #/써야한다               #먼저 컴퓨터에 다운 받고
air <- read.csv("airquality.csv",header=T) #엑셀파일에서 오존,등등
air
View(air)
setwd("D:/WorkR")  #/써야한다
write.csv(person.info,"person_info.csv",row.names = F)
setwd("D:/WorkR")  #/써야한다               #먼저 컴퓨터에 다운 받고
air <- read.csv("airquality.csv",header=T) #엑셀파일에서 오존,등등
air
View(air)
setwd("D:/WorkR2")  #/써야한다               #먼저 컴퓨터에 다운 받고
air <- read.csv("airquality.csv",header=T) #엑셀파일에서 오존,등등
air
View(air)
df.xlsx <- read.xlsx(file="airquality.xlsx",sheetIndex = 1,
encoding="UTF-8")
df.xlsx
library(xlsx)
library(rJava)
df.xlsx <- read.xlsx(file="airquality.xlsx",sheetIndex = 1,
encoding="UTF-8")
df.xlsx
