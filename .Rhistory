2*a+3*b
a+b
b-a
b/a
a*b
class(iris)
class(state.x77)
str(iris)
class(iris);      str(iris)
class(state.x77); str(state.x77)
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77)
st <- data.frame(state.x77)
str(st)
head(st)
class(st)
iris.m <- as.matrix(iris[,1:4])
head(iris.m)
class(iris.m)
dim(st)
iris.m <- as.matrix(iris[,1:4])
head(iris.m)
class(iris.m)
str(st)
head(st)
population
head(st)
Population
attach(st)
Poulation
head(st)
Population
attach(st)
Population
detach(st)
Population
attach(st)
Population
head(st)
Population
attach(st)
Population
city.info[1,1]
city.info[1, ]
city.info[ ,1]
city.info[city.inf$city, ]
city.info[,"rank"]
city <- c("seolul","Tokyo","Washington")
rank <- c(1,2,3)
city.info <- data.frame(city,rank)
city.info
city.info[1,1]
city.info[1, ]
city.info[ ,1]
city.info[city.inf$city, ]
city.info[,"rank"]
head(st)
Population
attach(st)
Population
detach(st)
Population
setwd("D:/WorkR")  #/써야한다
air <- read.csv("airquality.csv",header=T) #엑셀파일에서 오존,등등
#없는 경우는 F
class(air)
dim(air)
str(air)
head(air)
tail(air)
setwd("D:/WorkR")  #/써야한다
write.csv(person.info,"person_info.csv",row.names = F)
m <- matrix(10:30,2,4); m
m <- matrix(score) ;m
a <- score ;a
z <- matrix(a,2,4); z
>score
m  f
[1,] 10 21
[2,] 40 60
[3,] 60 70
[4,] 20 30
a<- score(10,20,21,40,60,60,70,30)
z <- matrix(a,2,4); z
score <- matrix(c(10,21,40,60,60,70,20,30),4,2)
score
row.names(score) <- c("male","female")
score
col.names(score) <- c("male","female")
score
score <- matrix(c(90,85,69,78,
85,96,49,95,
91,82,70,70),
nrow = 4, ncol=3)
score
rownames(score) <- c("Hong","Kim","Lee","yoo")
colnames(score) <- c("English","Math","Science")
score
colnames(score) <- c("male","female")
score
rownames(score) <- c("male","female")
score
rownames(score) <- c("male","female")
score
colnames(score) <- c("male","female")
score
score[2,]
>score
m  f
[1,] 10 21
[2,] 40 60
[3,] 60 70
[4,] 20 30
#문1-1
score <- matrix(c(10,21,40,60,60,70,20,30),4,2)
score
score[2,]
score <- matrix(c(10,21,40,60,60,70,20,30),4,2)
score
colnames(score) <- c("male","female")
score
score[,2]
score[3,2]
st <- data.frame(state.x77)
class(state.x77)
st <- data.frame(state.x77)
st <- data.frame(state.x77)
st
st <- data.frame(state.x77)
st
head(st)
tail(st)
st[nrow]
st[,1]
st[1,]
length(st)
nrow(st)
dim(st)
nrow(st)
unique(st)
heda(st)
head(st)
rowSums(st)
rowMeans(st)
colSums(st)
colMeans(st)
names(st)
smmary(st)
summary(st)
names(st)
unique(st["Florida"])
unique(st("Florida"))
subset(st,Species=="Florida")
st.1 <- subset(st,Species=="Florida"); st.1
st
st["Florida",]
st["Florida",]
View(city.info)
View(IR.1)
View(city.info)
View(st)
st[,"Income"]
# 11. Texas 주의 면적(Area)을 출력
st["Texas","Area"]
# 12. Ohio 주의 인구(Population)와 수입(Income) 출력
st['Ohio',c('population','Income')]
st['Ohio',c('population','Income')]
# 12. Ohio 주의 인구(Population)와 수입(Income) 출력
st['Ohio',c('Population','Income')]
View(IR.1)
View(IR.2)
subset(st, 'Population'>5000)
subset(st, 'Population'>5000)
subset(st, 'Population'>5000)
subset(st, Population>5000)
subset(st, Population>5000)
subset(st, 'Population'>5000)
# 14. 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력
subset(st, ,Income> 4500)
subset(st, Income> 4500)
A[,c('Population','Income','Area')]
A[ ,c('Population','Income','Area')]
A<- subset(st, Income> 4500)
A[ ,c('Population','Income','Area')]
score <- matrix(c(10,21,40,60,60,70,20,30),4,2)
score
score <- matrix(c(10,40,60,20,21,60,70,30),nrow=4,ncol=2)
score
colnames(score) <- c("male","female")
score
View(score)
View(score)
class(state.x77)
colnames(st)
rownames(st)
summary(st)
str(st)
rowSums(st)
apply(st,1,sum)
score[,'female']
apply(st,1,mean)
View(A)
# 15. 수입이 4,500 이상인 주는 몇 개인지 출력
dim(A)
# 15. 수입이 4,500 이상인 주는 몇 개인지 출력
dim(A,)
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset[],'Area'>100,000& 'Frost'>120]
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset[,'Area'>100,000& 'Frost'>120]
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset[,'Area'>100,000 & 'Frost'>120]
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset[ ,'Area'>100,000 & 'Frost'>120]
View(st)
B <- subset[ ,'Area'>100,000 & 'Frost'>120];B
B <- subset(st,'Area'>100,000 & 'Frost'>120); B
B <- subset(st,'Area'>100,000 & 'Frost'>120); B
View(B)
View(B)
View(B)
class(mtcars)
dim(,)
dim(mtcars)
table(mtcars)
dim(A)
B <- dim(A)
B(1)
B <- dim(A)
B(1)
dim(A)
B <- dim(A)
B(1)
A<- subset(st, Income> 4500)
A[ ,c('Population','Income','Area')]
# 15. 수입이 4,500 이상인 주는 몇 개인지 출력 ?
dim(A)
B <- dim(A)
B(1)
B[1]
nrow(A)
ncol(A)
table(mtcars)
colnames(mtcars)
str(mtcars)
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력?
subset(mtcars,species=='mpg')
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력?
C <- subset(mtcars,species=='mpg');C
C <- subset(mtcars,Species=='mpg');C
C <- subset(mtcars, Species=='mpg');C
max(mpg)
max['mpg']
max['mpg,
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력?
# 6. Honda Civic의 연비(mpg)와 gear 수 출력
# 7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
# 8. 자동차 모델들의 평균 연비 출력
# 9. gear의 수 종류 출력
#
# 문4)
# R에서 제공하는 airquality 데이터셋은 일별로 대기의 질을 측정한 정보를 담고 있다.
#
# 1. 이 데이터셋의 자료구조 출력
class(airquality)
# 2. 이 데이터셋의 앞쪽 일부분 내용만 출력
# 3. 기온(Temp)이 가장 높은 날은 언제인지 월(Month)과 일(Day) 출력
# 4. 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
# 5. 7월 달의 평균 기온(Temp) 출력
# 6. 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
#
# 문5)
# 1. R에서 제공하는 state.x77 데이터셋에서 수입(Income)이 5,000 이상인 주의 데이터에서
# 수입(Income), 인구(Population), 면적(Area) 열의 값들만 추출하여 rich_state.csv에 저장
# 2. 1.에서 만든 rich_state.csv파일을 읽어서 ds 변수에 저장한 후 ds 내용 출력
class(airquality)
str(iris)
class(iris);      str(iris)
max['mpg,
# 5. gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력?
# 6. Honda Civic의 연비(mpg)와 gear 수 출력
# 7. Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
# 8. 자동차 모델들의 평균 연비 출력
# 9. gear의 수 종류 출력
#
# 문4)
# R에서 제공하는 airquality 데이터셋은 일별로 대기의 질을 측정한 정보를 담고 있다.
#
# 1. 이 데이터셋의 자료구조 출력
class(airquality)
# 2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
# 3. 기온(Temp)이 가장 높은 날은 언제인지 월(Month)과 일(Day) 출력
# 4. 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
# 5. 7월 달의 평균 기온(Temp) 출력
# 6. 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
#
# 문5)
# 1. R에서 제공하는 state.x77 데이터셋에서 수입(Income)이 5,000 이상인 주의 데이터에서
# 수입(Income), 인구(Population), 면적(Area) 열의 값들만 추출하여 rich_state.csv에 저장
# 2. 1.에서 만든 rich_state.csv파일을 읽어서 ds 변수에 저장한 후 ds 내용 출력
class(airquality)
# 2. 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
max('mpg')
max('mpg'); max
max('mpg',)
max['mpg',]
# 4. 연비(mpg)가 가장 좋은 자동차 모델 출력?
subset(mtcars, Species=='mpg')
max('mpg')
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력 ?
B <- subset(st,'Area'>100,000 & 'Frost'>120); B
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset(st,Area>100,000 & Frost>120)
subset(st,Area>100,000 & Frost>120)
# 16. 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset(st,Area>100000 & Frost>120)
subset(st,2000<Population & 120000>Population)
subset(st,2000<Population & 120000>Population)
subset(st,2000>Population & 120000>Murder)
subset(st,2000>Population & 12>Murder)
# 18. 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력
C<- subset(st,Illiteracy>=2.0);C
mean(C)
apply(st,C,2,mean)
apply(st,C,mean)
D <- C$Income
D
mean(D)
C-E
abs(C-E)
E<- subset(st,Illiteracy<2.0)
abs(C-E)
mean(E)
E<- subset(st,Illiteracy<2.0)
mean(E)
E<- subset(st,Illiteracy<2.0)
mean(E)
abs(C-E)
C-E
D <- mean(D)
D
F<-E$Income
F<-E$Income
E<- subset(st,Illiteracy<2.0)
F<-E$Income
E<- subset(st,Illiteracy<2.0)
F<-E$Income
D <- mean(D)
D
E<- subset(st,Illiteracy<2.0)
P<-E$Income
abs(D-P)
P<-E$Income
G<-E$Income
abs(D-G)
E<- subset(st,Illiteracy<2.0)
G<-E$Income
mean(G)
abs(D-G)
E<- subset(st,Illiteracy<2.0)
G<-E$Income
G<- mean(G)
abs(D-G)
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
E2 <- subset(st,Life Exp)
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
E2 <- subset(st,Specise=='Life Exp' )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력
E2 <- subset(st,Species=='Life Exp' )
# 20. 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력?
G1 <- subset(st,Species=='Life Exp')
st
G1 <- st$Life.Exp
G1 <- st$Life.Exp
G1
max(G1)
subset(st,G1)
G2 <- max(G1)
subset(st,Life.Exp==G2)
G3<- subset(st,Life.Exp==G2)
rownames(G3)
colnames(mtcars)
str(mtcars)
colnames(mtcars)
G5 <- st$mpg
G5
G5 <- st$mpg
G5
st$mpg
mtcars$mpg
G5<- mtcars$mpg
G5<- mtcars$mpg
G5
G6 <- max(G5)
G6 <- max(G5)
G6
subset(mtcars, Species=='mpg')
subset(mtcars, mpg==G6)
rownames(G6)
rownames(G6)
G7<- subset(mtcars, mpg==G6)
rownames(G7)
# 21 Pennsylvania 주보다 수입(Income)이 높은 주들 출력?
A1 <- subset(st,Pennsylvania)
A1<- subset(mtcars,gear==4)
A1<- subset(mtcars,gear==4)
A1
A2 <- min(A1)
A2
A2 <- min(A1)
A2
A1<- subset(mtcars,gear==4)
A1
A2 <- min(A1)
A2
A1<- mtcats$gear
A1
A1<- mtcats$gear
A1
A2 <- min(A1)
A2
A1 <- mtcars$gear
A1
A1 <- mtcars$gear
A1
A2 <- min(A1)
A2
A1 <- sub(mtcars,gear==4) ;A1
A1 <- subset(mtcars,gear==4) ;A1
A2 <- min(A1)
A2 <- min(A1);A2
A2 <- A1$mpg
min(A2)
rowname(A2)
A4 <- subset(mtcars,mpg==A3)
rowname(A4)
A1 <- subset(mtcars,gear==4) ;A1
A2 <- A1$mpg
A3<- min(A2)
A4 <- subset(mtcars,mpg==A3)
rowname(A4)
A1 <- subset(mtcars,gear==4) ;A1
A2 <- A1$mpg
A3<- min(A2)
A4 <- subset(mtcars,mpg==A3)
rownames(A4)
mtcars$mpg
mtcars[[mpg,gear]]
mtcars$gear
mtcars['Honda Civic']
mtcars['Honda Civic']
mtcars['Honda Civic',]
B2<- mtcars['Honda Civic',]
B2<- mtcars['Honda Civic',] B2
B2<- mtcars['Honda Civic',]; B2
mtcars['Honda Civic',c('mpg','gear')]
C1 <- mtcars[ 'Pontiac Firebird','mpg']; C1
subset(mtcars,'mpg' >C1)
subset(mtcars,'mpg' >C1)
#8. 자동차 모델들의 평균 연비 출력
mean(mtcars$mpg)
# 9. gear의 수 종류 출력
unique(mtcars$gear)
# 3. 기온(Temp)이 가장 높은 날은 언제인지 월(Month)과 일(Day) 출력
max(airquality$Temp)
air1<- max(airquality$Temp)
air1
subset(airquality,air1==Temp)
air1<- max(airquality$Temp)
air1
air2<- subset(airquality,air1==Temp)
air2[,c('Month','Day')]
air3<- subset(airquality,Month==6)
air3
max(air3$Wind)
air4 <- subset(airquality,Month==7)
air4
mean(air4$Temp)
# 6. 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
subset(airquality,Ozone > 100)
dim(airquality)
dim(subset(airquality,Ozone > 100)
dim(subset(airquality,Ozone > 100))
dim(air5)
air5<- subset(airquality,Ozone > 100)
dim(air5)
air5
nrow(air5)
# 문5)
# 1. R에서 제공하는 state.x77 데이터셋에서 수입(Income)이 5,000 이상인 주의 데이터에서
# 수입(Income), 인구(Population), 면적(Area) 열의 값들만 추출하여 rich_state.csv에 저장
str(state.x77)
st1<- data.frame(state.x77);st1
subset(st1,Income>5000)
st2[,c('Income','Population','Area')]
st2 <- subset(st1,Income>5000)
st2[,c('Income','Population','Area')]
setwd("D:/WorkR")  #/써야한다
write.csv(rich_state,"rich_state.csv",row.names = T)
str(state.x77)
st1<- data.frame(state.x77);st1
st2 <- subset(st1,Income>5000)
rich_state<- st2[,c('Income','Population','Area')]
setwd("D:/WorkR")  #/써야한다
write.csv(rich_state,"rich_state.csv",row.names = T)
ds<- read.csv("rich_state.csv",header = T)
ds<- read.csv("rich_state.csv",header = T)
ds
