st1 <- as.numeric(st1)
st1
tem_traveler_stay <- data.frame(tem_traveler, 체류기간=st1)
tem_traveler_stay
cor(tem_traveler_stay)
ggplot(data = tem_traveler_stay, aes(x = 제주평균기온, y = 관광객.수)) +
geom_point(size = 4,col = "red") +
ggtitle("관광객수와 평균기온 비교") +
theme(plot.title = element_text(size = 25, #title 서식 지정
face = "bold",
colour = "steelblue")) +
stat_smooth(method = "lm") +
labs(y ="월 관광객 수(만 명)", x = "제주 월평균기온")
#bar 누적막대그래프 만들기
setwd("D:\home\plot함수 응용")
#bar 누적막대그래프 만들기
setwd("D:/home/plot함수 응용")
plot.new()
data<-read.csv("C:seoulpopulation.csv",sep=",",header=TRUE)
data<-read.csv("seoulpopulation.csv",sep=",",header=TRUE)
data
tot<-rowSums(data[,c('남자','여자')],na.rm=TRUE)
tot
data<-cbind(data,tot)
data                                          #새로운 변수 만들어서 cbind 시킴
data1<-subset(data,tot>=500000)               #부분추출!! subset함수!!
data1
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만명 이상 자치구",ylim=c(0,400000))
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만명 이상 자치구",ylim=c(0,400000))
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만명 이상 자치구",ylim=c(0,4000000))
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만명 이상 자치구",ylim=c(0,3200000))
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만명 이상 자치구",ylim=c(0,3500000))
barplot(as.matrix(data1[1:6,2:3]),legend=c('남자','여자'),beside=TRUE,las=1,col=c("darkgreen","pink"),
main="서울시 인구 50만며 이상 자치구",ylim=c(0,400000))
x<-c(23,33,32,45,37,28,15,35,43,27,46,33,38,46,50,25)
hist(x,main="설문조사 나이별 분포",xlim=c(15,50),col="pink")
#상자수염
plot.new()
data<-read.csv("C:/Users/SJY/Desktop/빅데이터전문가/birthdie.csv",sep=",",header=TRUE)
x<-1:100
y<-sample(x,size = 10,replace=FALSE)    #sample(대상,임의의 숫자,방법) 비복원 추출 (벡터)
y
#데이터 조합
combn(1:5,3)   #combn (무작위로 뽑아서 )조합하는 함수, 콤마뒤에 있는 개수대로 나옴
#데이터병합
x<-data.frame(name=c("a","b","c"),    #merge :병합하다
mat=c(90,80,40))
y<-data.frame(name=c("a","b","d"),
korean=c(75,60,90) )
z<-merge(x,y,by=c("name"))
z
merge(x,y)   #변수만 추가
merge(x,y,all.x = T)  #변수추가
merge(x,y,all.y = T)  #변수추가
merge(x,y,all=T)      #변수,데이터 추가
df<-data.frame(var1=c(1,2,1),
var2=c(2,3,2))
df
#rename () :이름변경
df<-rename(df,v1=var1,v2=var2)
df
#파생변수 추가
df$sum<-df$v1+df$v2
df
df[2,1]<-5
df
df <- data.frame(id = c(1, 2, 3, 4, 5, 6), class = c(1, 1, 1, 1, 2, 2),
math = c(50, 60, 45, 30, 25, 50),
english = c(98, 98, 86, 98, 80, 89),
science = c(50, 60, 78, 58, 65, 98))
df
#dplyr 함수 조합
df%>%filter(class==1)%>%select(science)
df%>%select(id,science)%>%head
df%>%select(id,science)%>%sum
df%>%select(science)%>%sum
df%>%select(id,science)%>%max
#arrange():정렬
df%>%arrange(science)
df%>%arrange(desc(science))
#mutate():파생변수추가
df%>%
mutate(total=math+english+science)%>%head
df%>%
mutate(total=math+english+science,average=(math+english+science)/3)%>%head
df%>%
mutate(grade=ifelse(science>=60,'pass','fail'))%>%head
df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%
mutate(grade=ifelse(science>60,'pass',
ifesle(average<60, 'fail',
'normal')))%>%head
df%>%
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%arrange(desc(average))%>%head
df.sort<-df%>%          #필요하다면 변수에 담고
mutate(total=math+english+science,
average=(math+english+science)/3 )%>%arrange(desc(average))%>%head
df.sort
#summary():집단별 요약
#group_by:집단별 나누기
df%>%summarise(mean_math=mean(math))
df%>%group_by(class)%>%
summarise(mean_math=mean(math),
mean_english=mean(english),
mean_science=mean(science),
n=n())                       #n()은 빈도수를 계산해 table이랑 비슷, tibble은 data.frame이랑 비슷
mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty=mean(cty))%>%
head(10)
mpg<-data.frame(ggplot2::mpg)
dim(mpg)
str(mpg)
head(mpg)
View(mpg)
mpg%>%
group_by(manufacturer,drv)%>%
summarise(mean_cty=mean(cty))%>%
head(10)
mpg%>%
group_by(manufacturer,drv)%>%
filter(class=='suv')%>%
mutate(tot=(cty+hwy)/2)%>%
summarise(mean_tot=mean(tot))%>%
arrange(desc(mean_tot))%>%
head(5)
df1<-data.frame(id=c(1,2,3,4,5),         #??
midterm=c(60,80,70,90,85))
df1
df2<-data.frame(id=c(1,2,3,4,5),
final=c(60,80,70,90,85))
df2
library(tidyverse)
dim(mpg)
str(mpg)
head(mpg)
ggplot(data=mpg)+                           #ggplot, +, geom_point:산점도그리는 함수 /mapping할때aes 함수를 쓴것(x,y지정)
geom_point(mapping = aes(x=displ,y=hwy))
month<-c(1,2,3,4,5,6)
rain<-c(55,50,45,50,60,70)
df<-data.frame(month,rain)
df
ggplot(df,aes(x=month,y=rain))+
geom_bar(stat = "identity",
width = 0.7,
fill="steelblue")
ggplot(df,aes(x=month,y=rain))+            #ggplot,+,(mapping 생략도 가능)
geom_bar(stat = "identity",              #stat :y값이있어야함,y축값으로 막대높이를 정하라
width = 0.7,                    #width: 폭, fill :막대색깔
fill="steelblue")+
ggtitle("월별강수량")+
theme(plot.title = element_text(size = 25,   #'월별강수량'의 꾸미기
face = "bold",
colour="steelblue"))+
labs(x="월",y="강수량")+coord_flip()   #가로형막대로하라
ggplot(iris,aes(x=Petal.Length))+        #범주형이라면 카운트 해야하지만 연속형은 카운트 할 수 없음
geom_histogram(binwidth = 0.6)        #연속형binwidth : 빈도 계산,꽃잎의 길이를 0.5단위로 카운트 해라
fillPalette<-c("red","yellow","green")
ggplot(iris,aes(x=Sepal.Width, fill=Species,  #fill에는 범주형을,species 는 범주형 문자형이지만 숫자로 자동 변환 1,2,3...
color=Species))+
geom_histogram(binwidth = 0.5,position = "dodge")+  #dodge품종별로 각각그리기
theme(legend.position = "top") +  #top 범례의 위치
scale_fill_manual(values=fillPalette)
ggplot(iris,aes(x=Sepal.Width, fill=Species,  #fill에는 범주형을,species 는 범주형 문자형이지만 숫자로 자동 변환 1,2,3...
color=Species))+
geom_histogram(binwidth = 0.3,position = "dodge")+  #dodge품종별로 각각그리기
theme(legend.position = "top") +  #top 범례의 위치
scale_fill_manual(values=fillPalette)
ggplot(iris,aes(x=Sepal.Width, fill=Species,  #fill에는 범주형을,species 는 범주형 문자형이지만 숫자로 자동 변환 1,2,3...
color=Species))+
geom_histogram(binwidth = 0.3,)+  #dodge품종별로 각각그리기: 즉, 색깔별로 막대그래프를 그려라
theme(legend.position = "top") +  #top 범례의 위치
scale_fill_manual(values=fillPalette)
ggplot(iris,aes(x=Sepal.Width, fill=Species,  #fill에는 범주형을,species 는 범주형 문자형이지만 숫자로 자동 변환 1,2,3...
color=Species))+
geom_histogram(binwidth = 0.3,position = "dodge")+  #dodge품종별로 각각그리기: 즉, 색깔별로 막대그래프를 그려라
theme(legend.position = "top") +  #top 범례의 위치
scale_fill_manual(values=fillPalette)
#색깔별로 막대그래프가 됌
ggplot(iris,aes(x=Sepal.Width, fill=Species,  #fill에는 범주형을,species 는 범주형 문자형이지만 숫자로 자동 변환 1,2,3...
color=Species))+
geom_histogram(binwidth = 0.3,position = "dodge",binwidth=0.7)+  #dodge품종별로 각각그리기: 즉, 색깔별로 막대그래프를 그려라
theme(legend.position = "top") +  #top 범례의 위치
scale_fill_manual(values=fillPalette)
iris
table(iris)
ggplot(data=iris,mapping=aes(x=Petal.Length,       #ggpolt쓸때 data이름이랑, aes (x,y)값은 정해줘야 최소
y=Petal.Width))+      #각각의 판마다 역할을 나눠줌
geom_point()
ggplot(data=iris)+
geom_point(mapping=aes(x=Petal.Length,
y=Petal.Width))
ggplot(data=iris,mapping=aes(x=Petal.Length,
y=Petal.Width,
color=Species,
shape=Species))+
geom_point(size=3)+
ggtitle("꽃잎의 길이와 폭")+
theme(plot.title = element_text(size=25,
face="bold",
colour = 'red'))
#ggplot box plot
ggplot(data = iris,mapping = aes(y=Petal.Length))+   #박스플롯은 y 값을 정해주면 됌 x값은 (폭)은 의미가 없음
geom_boxplot(fill="yellow")
ggplot(data = iris,mapping = aes(y=Petal.Length,
fill=Species))+
geom_boxplot()
#사선
ggplot(economics,aes(x=date,y=psavert))+
geom_line()+
geom_abline(intercept = 12.18671, #회귀선
slope = -0.0005444)
#평행선
ggplot(economics,aes(x=date,y=psavert))+
geom_line()+
geom_hline(yintercept = mean(economics$psavert)) #평균값이상과 이하로 넣은것
#영역지정 및 화살표 표시
ggplot(mtcars,aes(x=wt,y=mpg))+
geom_point()+
annotate("rect",      #사각형모양으로 강조 하겠다
xmin = 3,
xmax = 4,
ymin = 12,
ymax = 21,
alpha= 0.5, #알파 값은 투명도 :1에 가까울수록 불투명
fill="skyblue")+
annotate("segment",x=2.5, xend=3.7,   #segment는 화살표 , xend =길이
y=10, yend = 17, color="red",
arrow=arrow())+
annotate("text",x=2.5, y=10,          #x,y 는 글자가 시작되는 위치
label="point")
#산점도에 Bubble 추가 (bubble chart) 1)버블차트
symbols(st$Illiteracy, st$Murder,    #원의 x, y 좌표
circles = st$Population,     #원의 반지를
inches = 0.3,               #원 크기 조절값
fg="white",                     #원 테두리 색
bg="lightgray",            #원 바탕색
lwd=1.5,                    #원 테두리선 두께
xlab='rate of Illiteracy',
ylab = "crime(murder) rate",
main= "Illiteracy and Crime")
library(treemap)
treemap(GNI2014,
index = c("continent","iso3"),   #계층구조 콤마로 여러개해도 돼?
vSize = "population",            #타일크기
vColor="GNI",                     #타일컬러
type="value",                   #타일컬러링 방법(값이 높은것은 진하게)
bg.labels="yellow",             #레이블배경색
title="World's GNI")            #제목
st<-data.frame(state.x77)
data(GNI2014)
treemap(GNI2014,
index = c("continent","iso3"),   #계층구조 콤마로 여러개해도 돼?
vSize = "population",            #타일크기
vColor="GNI",                     #타일컬러
type="value",                   #타일컬러링 방법(값이 높은것은 진하게)
bg.labels="yellow",             #레이블배경색
title="World's GNI")            #제목
st<-data.frame(state.x77)
st<-data.frame(st,stname=rownames(st)) #data.frame(컬럼1=자료, 컬럼2=자료...)
View(st)
treemap(st,
index=c("stname"),
vSize = "Area",
vColor = "Income",
type="value",
title="미국주별수입")
#산점도에 Bubble 추가 (bubble chart) 1)버블차트
symbols(st$Illiteracy, st$Murder,    #원의 x, y 좌표
circles = st$Population,     #원의 반지를
inches = 0.3,               #원 크기 조절값
fg="white",                     #원 테두리 색
bg="lightgray",            #원 바탕색
lwd=1.5,                    #원 테두리선 두께
xlab='rate of Illiteracy',
ylab = "crime(murder) rate",
main= "Illiteracy and Crime")
text(st$Illiteracy, st$Murder,      #텍스트 출력 x,y 좌표
rownames(st),                  #출력할 text
cex=0.6,                        #폰트크기
col ="brown")                    #폰트컬러
#ggplot 이용 2)버블차트 The R Graph Gallery :http://r-graph-gallery.com/index.html
# Libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(viridis)
library(hrbrthemes)
# The dataset is provided in the gapminder library
library(gapminder)
data <- gapminder %>% filter(year=="2007") %>% dplyr::select(-year)
# Interactive version
p <- data %>%
mutate(gdpPercap=round(gdpPercap,0)) %>%
mutate(pop=round(pop/1000000,2)) %>%
mutate(lifeExp=round(lifeExp,1)) %>%
# Reorder countries to having big bubbles on top
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ", pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep="")) %>%
# Classic ggplot
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Population (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
year<-1937:1960
cnt<-as.vector(airmiles)
df<-data.frame(year,cnt)
head(df)
ggplot(df,aes(x=year,y=cnt))+
geom_line(col="red")
geom_line(aes(x=year,y=))
str(mtcars)
head(mtcars)
mosaicplot(~gear+vs,      #대상변수:~x, +y 축
data=mtcars,   #데이터셋
color=TRUE,    #y 축 변수의 그룹별 음영 다르게 표시
main = "Gear and Vs") #제목
mosaicplot(~gear+vs,data=mtcars,
color=c("green","blue"), #색상지정
main = "Gear and Vs")
tb1<-table(mtcars$gear,mtcars$vs) #(도수분포표)교차표를 만듦,
tb1
mosaicplot(tb1,color = T,main = "Gear and Vs")
library(Rtsne)
library(ggplot2)
ds<-iris[,-5] #4차원이니까
ds
dim(ds)
dup = which(duplicated(ds))
dup
ds <- ds[-dup,]
ds
ds.y<-iris$Species[-dup]
ds.y
#차원축소 수행: t-sne 실행
tsne<-Rtsne(ds, dim=2,  perplexity=10) #차원축소대상 데이터셋
tsne
#차원축소결과 시각화
df.tsne<-data.frame(tsne$Y)
head(df.tsne)
ggplot(df.tsne,aes(x=X1,y=X2,color=ds.y))+
geom_point(size=2)
library(car)
library(rgl)
library(mgcv)
tsne<-Rtsne(ds,dim=3,perplexity=10)
df.tsne<-data.frame(tsne$Y)
head(df.tsne)
scatter3d(x=df.tsne$X1,y=df.tsne$X2,
z=df.tsne$X3)
point<-as.integer(ds.y)
color<-c('red','green','blue')
scatter3d(x=df.tsne$X1,y=df.tsne$X2,
z=df.tsne$X3,
point.col=color[point],
surface=FALSE)
#지도에 마커표시
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=6,
marker=gc)
ggmap(map)
#지도에 풍속을 원의 크기로 표시
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=6)
register_google(key = 'AIzaSyBdvaqxtk8AUDQE8fSZly76zSmzu6vYEP4')
#절차
#1.R최신버전 설치
#2.ggpolt2최신버전 설치
#3.ggmap 설치
#4.구글맵을 사용하기 위한API key 획득
#5.구글맵을 이용한 공간 시각화 수행
library(ggmap)
#지도에 풍속을 원의 크기로 표시
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=6)
gmap<-ggmap(map)
gmap+
geom_point(data=df,                 #point 함수로
aes(x=lon,y=lat,size=spd),
alpha=0.5, col="blue")+
scale_size_continuous(range = c(1,14)) #원 크기 조절 range
#내가 원하는 지점에 마커표시하는 법
gc<-geocode(enc2utf8("제주"))
cen<-as.numeric(gc)
map<-get_googlemap(center=cen,
maptype = "roadmap",
marker=gc)
ggmap(map)
#제주 관관지를 지도위에 표시
names<-c("용두암","성산일출봉","정방폭포",
"중문관광단지","한라산1100고지","차귀도")
addr<-c("제주시 용두암길15",
"서귀포시 성산읍 성산리",
"서귀포시 동홍동 299-3",
"서귀포시 중문동 2624-1",
"서귀포시 색달동 산 1-2",
"제주시 한경면 고산리 125")
gc<-geocode(enc2utf8(addr))
gc
#관광지 명칭과 좌표값으로 data frame 생성
df<-data.frame(name=names, lon=gc$lon,
lat=gc$lat)
df
cen<-c(mean(df$lon),mean(df$lat)) #중심점 경도와 위도의 평균
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=10,
size = c(640,640),
marker=gc)
ggmap(map)
#지도에 관광지 이름 추가
gmap<-ggmap(map)
gmap+
geom_text(data=df,            #데이터 셋
aes(x=lon,y=lat),   #텍스트 위치 (경도, 위도값)
size=5,             #텍스트 크기
label=df$name)      #텍스트 이름
#지도에 데이터 표시
dim(wind)
str(wind)
sp<-sample(1:nrow(wind), 50)
df<-wind[sp,]
head(df)
cen<-c(mean(df$lon),mean(df$lat))
gc<-data.frame(lon=df$lon, lat=df$lat)
head(gc)
#지도에 마커표시
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=6,
marker=gc)
ggmap(map)
#지도에 풍속을 원의 크기로 표시
map<-get_googlemap(center=cen,
maptype = "roadmap",
zoom=6)
gmap<-ggmap(map)
gmap+
geom_point(data=df,                 #point 함수로
aes(x=lon,y=lat,size=spd),
alpha=0.5, col="blue")+
scale_size_continuous(range = c(1,14)) #원 크기 조절 range
#단계 구분도
install.packages("ggiraphExtra")
library(ggiraphExtra)
#단계 구분도
install.packages("ggiraphExtra")
library(ggiraphExtra)
dim(USArrests)   #데이터셋 분석하기 전에 보면 좋은것
str(USArrests)
head(USArrests)
library(tibble)
crime<-rownames_to_column(USArrests,var="state")
crime$state<-tolower(crime$state)
str(crime)
library(ggplot2)
library(mapproj)
state_map<-map_data("state")
str(state_map)
ggChoropleth(data=crime,
aes(fill=Murder,
map_id=state),
map=state_map)
#http://rpubs.com/cardiomoon/222145 우리나라지도를 색으로 구분할수 있는 곳
install.packages("devtools")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")  #이게 있어야 지도를 그릴수 있음,R패키지에서 제공하는게 아님.
devtools::install_github("cardiomoon/moonBook2")    #깃허브에 접근하기 위해서 devtools 를 쓰는 것임
theme_set(theme_gray(base_family="NanumGothic"))
ggplot(korpop1,aes(map_id=code,fill=총인구_명))+
geom_map(map=kormap1,colour="black",size=0.1)+
expand_limits(x=kormap1$long,y=kormap1$lat)+
scale_fill_gradientn(colours=c('white','orange','red'))+
ggtitle("2015년도 시도별 인구분포도")+
coord_map()
library(kormaps2014)
library(moonBook2)
#3.명사추출
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_231')
#필요시 설치
install.packages("wordcloud")   #word cloud
install.packages("wordcloud2")  #word cloud
install.packages("KoNLP")       #한국어처리,사전정보:꼭 설치되어야함
install.packages("RColorBrewer") #색상선택
install.packages("RColorBrewer")
#텍스트 파일에는 (저장후)아무것도 기록되지 않은 공백 줄 마지막에 한줄이상
setwd("D:/home/수업강의자료")
text<-readLines("mis_document.txt",encoding = "UTF-8")
text
#'우리말씀' 한글 사전 로딩
buildDictionary(ext_dic = 'woorimalsam')
#'우리말씀' 한글 사전 로딩
buildDictionary(ext_dic = 'woorimalsam')
pal2<-brewer.pal(8,'Dark2') #색상 팔레트 생성:8번 다크계열의 색을 쓰겠다
noun<-sapply(text, extractNoun,USE.NAMES = F) #명사추출 Use.names :
noun
class(noun)
install.packages("cvTools")
